diff -Nurd git_ori/ipmi/manualcmds.cpp git/ipmi/manualcmds.cpp
--- git_ori/ipmi/manualcmds.cpp	2019-07-25 14:50:56.463845814 +0800
+++ git/ipmi/manualcmds.cpp	2019-07-25 14:56:07.770081251 +0800
@@ -25,12 +25,15 @@
 #include <string>
 #include <tuple>
 #include <variant>
+#include <fstream>
+#include <iostream>
 
 enum ManualSubCmd
 {
     GET_CONTROL_STATE = 0,
     SET_CONTROL_STATE = 1,
     GET_FAILSAFE_STATE = 2,
+    SET_FANPWM = 3,
 };
 
 struct FanCtrlRequest
@@ -46,6 +49,14 @@
     uint8_t value;
 } __attribute__((packed));
 
+struct FanCtrlSetPWM
+{
+    uint8_t command;
+    uint8_t zone;
+    uint8_t pwm_name;
+    uint8_t val; 
+} __attribute__((packed));
+
 static constexpr auto objectPath = "/xyz/openbmc_project/settings/fanctrl/zone";
 static constexpr auto busName = "xyz.openbmc_project.State.FanCtrl";
 static constexpr auto intf = "xyz.openbmc_project.Control.Mode";
@@ -53,6 +64,9 @@
 static constexpr auto failsafeProperty = "FailSafe";
 static constexpr auto propertiesintf = "org.freedesktop.DBus.Properties";
 
+/* PWM hwmon path */
+static constexpr auto pwmHwmonPath = "/sys/class/hwmon/hwmon0/pwm";
+
 using Property = std::string;
 using Value = sdbusplus::message::variant<bool>;
 using PropertyMap = std::map<Property, Value>;
@@ -206,7 +220,63 @@
     return rc;
 }
 
-/* Three command packages: get, set true, set false */
+/*
+ * Currently, set /sys/class/hwmon/ to write PWM value. 
+ * Eventually, we'll have to fix to write to xyz.openbmc_project.Control.FanPwm interface. 
+ * First, check if manual mode for a zone is true, then write PWM value to the designated PWM.
+ * For exceptions, return IPMI_CC_INVALID_FIELD_REQUEST if request is incorrect.
+ *                 return IPMI_CC_INVALID_FIELD if other errors.   
+ */
+static ipmi_ret_t setManualPWMVal(const uint8_t* reqBuf, uint8_t* replyBuf,
+                                     size_t* dataLen)
+{
+    ipmi_ret_t rc = IPMI_CC_OK;
+    bool ManualMode = false;
+    uint8_t reqPWMName, reqPWMVal = 0;
+    
+    if (*dataLen < sizeof(struct FanCtrlSetPWM))
+    {
+        return IPMI_CC_INVALID_FIELD_REQUEST;
+    } 
+
+    /* Check if manual mode in zone can be fetched or not  
+     * if not, return IPMI_CC_INVALID
+     */
+    const auto request =
+        reinterpret_cast<const struct FanCtrlSetPWM*>(&reqBuf[0]);
+    
+    rc = getFanCtrlProperty(request->zone, &ManualMode, manualProperty);
+    if (rc)
+        return rc;
+    
+    /* Check if any inputs are valid,
+     * if not, return IPMI_CC_INVALID
+     */ 
+    reqPWMName = request->pwm_name;
+    reqPWMVal = request->val; 
+    if ( reqPWMVal > 0xFF || !ManualMode || reqPWMName > 6 )
+        return IPMI_CC_INVALID;
+
+    /* Write PWM value to the designated PWM path.
+     * Output any errors. 
+     */
+    std::string pwmdev = pwmHwmonPath + std::to_string(reqPWMName);
+    std::ofstream ofile;
+    ofile.open(pwmdev);
+    if (ofile)
+    {
+        ofile << static_cast<int64_t>(reqPWMVal);
+        ofile.close();
+        return rc;
+    }
+    else
+    {
+        std::cerr <<" Fail to write to PWM, path: "<< pwmdev.c_str() << std::endl;
+        return IPMI_CC_INVALID;
+    }
+}
+
+/* Three command packages: get, set true, set false, set PWM */
 static ipmi_ret_t manualModeControl(ipmi_cmd_t cmd, const uint8_t* reqBuf,
                                     uint8_t* replyCmdBuf, size_t* dataLen)
 {
@@ -228,6 +298,8 @@
             return setManualModeState(reqBuf, replyCmdBuf, dataLen);
         case GET_FAILSAFE_STATE:
             return getFailsafeModeState(reqBuf, replyCmdBuf, dataLen);
+        case SET_FANPWM:
+            return setManualPWMVal(reqBuf, replyCmdBuf, dataLen);
         default:
             rc = IPMI_CC_INVALID;
     }
