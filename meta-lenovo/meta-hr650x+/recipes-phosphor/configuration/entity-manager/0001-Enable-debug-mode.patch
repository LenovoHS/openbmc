#"Copyright (c) 2019-present Lenovo
#Licensed under BSD-3, see COPYING.BSD file for details."

diff -Naur a/src/FruDevice.cpp b/src/FruDevice.cpp
--- a/src/FruDevice.cpp	2019-07-17 17:28:34.104069718 +0800
+++ b/src/FruDevice.cpp	2019-07-17 17:28:15.954166229 +0800
@@ -39,7 +39,7 @@
 }
 
 namespace fs = std::filesystem;
-static constexpr bool DEBUG = false;
+static constexpr bool DEBUG = true;
 static size_t UNKNOWN_BUS_OBJECT_COUNT = 0;
 constexpr size_t MAX_FRU_SIZE = 512;
 constexpr size_t MAX_EEPROM_PAGE_INDEX = 255;
@@ -70,7 +70,8 @@
 static int isDevice16Bit(int file)
 {
     /* Get first byte */
-    int byte1 = i2c_smbus_read_byte_data(file, 0);
+    int byte1 = i2c_smbus_read_byte(file);
+
     if (byte1 < 0)
     {
         return byte1;
@@ -80,7 +81,8 @@
      */
     for (int i = 0; i < 7; i++)
     {
-        int byte2 = i2c_smbus_read_byte_data(file, 0);
+        int byte2 = i2c_smbus_read_byte(file);
+
         if (byte2 < 0)
         {
             return byte2;
@@ -98,7 +100,15 @@
 {
     uint8_t low_addr = static_cast<uint8_t>(offset);
     uint8_t high_addr = static_cast<uint8_t>(offset >> 8);
-
+    uint32_t ii;
+ 
+    i2c_smbus_write_byte_data(file, 0, low_addr);
+	
+    for (ii=0; ii < len; ii++) {
+        buf[ii] = static_cast<uint8_t>(i2c_smbus_read_byte(file));
+    }
+    return ii;
+	
     if (flag == 0)
     {
         return i2c_smbus_read_i2c_block_data(file, low_addr, len, buf);
