diff -Naur a/watchdog.cpp b/watchdog.cpp
--- a/watchdog.cpp	2019-12-06 16:40:08.902707440 +0800
+++ b/watchdog.cpp	2019-12-06 17:32:04.716821956 +0800
@@ -17,11 +17,63 @@
 
 using sdbusplus::exception::SdBusError;
 using sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure;
+using Value = std::variant<bool, uint8_t, int16_t, uint16_t, int32_t, uint32_t,
+                           int64_t, uint64_t, double, std::string>;
 
 // systemd service to kick start a target.
 constexpr auto SYSTEMD_SERVICE = "org.freedesktop.systemd1";
 constexpr auto SYSTEMD_ROOT = "/org/freedesktop/systemd1";
 constexpr auto SYSTEMD_INTERFACE = "org.freedesktop.systemd1.Manager";
+constexpr auto PROP_INTF = "org.freedesktop.DBus.Properties";
+constexpr auto fpgaService = "org.openbmc.control.fpga";
+constexpr auto fpgaRoot = "/org/openbmc/control/fpga";
+constexpr auto fpgaInterface = "org.openbmc.control.fpga";
+constexpr auto IPMIService = "xyz.openbmc_project.Ipmi.Host";
+constexpr auto IPMIPath = "/xyz/openbmc_project/Ipmi";
+constexpr auto IPMIIntf = "xyz.openbmc_project.Ipmi.Server";
+
+uint8_t add_sel_event(sdbusplus::bus::bus& bus, uint8_t snr_num, uint8_t snr_type,
+                      uint8_t ed1, uint8_t ed2, uint8_t ed3) 
+{
+    uint8_t netFn = 0x0A; // Storage
+    uint8_t lun = 0x00;
+    uint8_t cmd = 0x44; // Add SEL Entry command
+    std::vector<uint8_t> data = { 0x00, 0x00,             // Record ID
+                                  0x02,                   // Record Type
+                                  0x00, 0x00, 0x00, 0x00, // Time Stamp
+                                  0x20, 0x00,             // Generator ID
+                                  0x04,                   // EvM Rev
+                                  snr_type,               // Sensor Type
+                                  snr_num,                // Sensor #
+                                  0x6F,                   // Event Dir | Event Type
+                                  ed1,                    // Event Data 1
+                                  ed2,                    // Event Data 2
+                                  ed3};                   // Event Data 3
+    std::map<std::string, sdbusplus::message::variant<int>> options;
+    // Watchdog Expired
+    try
+    {
+        Value value;
+        auto add_sel = bus.new_method_call(IPMIService, IPMIPath, IPMIIntf, "execute");
+        add_sel.append(netFn, lun, cmd, data, options);
+        auto reply = bus.call(add_sel);
+
+        if (reply.is_method_error())
+        {
+            //fprintf(stderr, "Failed to add sel by method error\n");
+            log<level::ERR>("Failed to add sel by method error");
+            return 1;
+        }
+    }
+    catch (const SdBusError& e)
+    {
+        //fprintf(stderr, "Failed to add sel %s\n", e.what());
+        log<level::ERR>("watchdog: Failed to add sel");
+        return 1;
+    }
+
+    return 0;
+}
 
 void Watchdog::resetTimeRemaining(bool enableWatchdog)
 {
@@ -110,6 +162,48 @@
 
     expiredTimerUse(currentTimerUse());
 
+    if (convertForMessage(expiredTimerUse()) == "xyz.openbmc_project.State.Watchdog.TimerUse.OSLoad") {
+        for (auto index=0; index<4; index++)
+        {
+            // There are MAX 4 CPU on HR855XG2
+            uint8_t res_data = 0xFF;
+            uint8_t block = 28;
+            uint8_t offset = 7;
+            bool present = true;
+
+            // dbus methond
+            auto method = bus.new_method_call(fpgaService, fpgaRoot,
+                                              fpgaInterface, "read_fpga");
+            method.append(block, offset);
+            try
+            {
+                auto pid = bus.call(method);
+                if (pid.is_method_error())
+                {
+                    log<level::ERR>("Error in method call\n");
+                }
+
+                pid.read(res_data);
+            }
+            catch (const sdbusplus::exception::SdBusError& e)
+            {
+                log<level::ERR>("fpga dbus error\n");
+            }
+
+            offset++;
+            present = (~res_data >> 3) & 0x01;
+            if (present)
+            {
+                uint8_t ret = add_sel_event(bus, (0x91 + index), 0x07, 0x02, 0xFF, 0xFF);
+                if (0 != ret) 
+                {
+                    log<level::ERR>("Failed to add sel event");
+                }
+            }
+        }
+    }
+
+    uint8_t offset = 0xFF;
     auto target = actionTargetMap.find(action);
     if (target == actionTargetMap.end())
     {
@@ -117,10 +211,11 @@
                          entry("ACTION=%s", convertForMessage(action).c_str()),
                          entry("TIMER_USE=%s",
                                convertForMessage(expiredTimerUse()).c_str()));
+        offset = 0;
     }
     else
     {
-        log<level::INFO>(
+        log<level::ERR>(
             "watchdog: Timed out",
             entry("ACTION=%s", convertForMessage(action).c_str()),
             entry("TIMER_USE=%s", convertForMessage(expiredTimerUse()).c_str()),
@@ -142,6 +237,25 @@
                             entry("ERROR=%s", e.what()));
             commit<InternalFailure>();
         }
+
+        if (convertForMessage(action) == "xyz.openbmc_project.State.Watchdog.Action.HardReset")
+        {
+            offset = 1;
+        }
+        else if (convertForMessage(action) == "xyz.openbmc_project.State.Watchdog.Action.PowerOff")
+        {
+            offset = 2;
+        }
+        else if (convertForMessage(action) == "xyz.openbmc_project.State.Watchdog.Action.PowerCycle")
+        {
+            offset = 3;
+        }
+    }
+
+    uint8_t ret = add_sel_event(bus, 0xF1, 0x23, offset, 0xFF, 0xFF);
+    if (0 != ret)
+    {
+        log<level::ERR>("Failed to add sel event");
     }
 
     tryFallbackOrDisable();
