--- a/watchdog.cpp	2019-09-26 14:57:00.663609257 +0800
+++ b/watchdog.cpp	2019-09-26 15:10:03.958357717 +0800
@@ -33,6 +33,9 @@
 constexpr auto IPMIService = "xyz.openbmc_project.Ipmi.Host";
 constexpr auto IPMIPath = "/xyz/openbmc_project/Ipmi";
 constexpr auto IPMIIntf = "xyz.openbmc_project.Ipmi.Server";
+constexpr auto OEMSnrService = "xyz.openbmc_project.OEMSensor";
+constexpr auto OEMSnrPath = "/xyz/openbmc_project/OEMSensor/Watchdog2";
+constexpr auto OEMSnrIntf = "xyz.openbmc_project.Sensor.Discrete.SpecificOffset";
 
 uint8_t add_sel_event(sdbusplus::bus::bus& bus, uint8_t snr_num, uint8_t snr_type,
                       uint8_t ed1, uint8_t ed2, uint8_t ed3) 
@@ -211,6 +214,7 @@
         }
     }
 
+    uint8_t offset = 0xFF;
     auto target = actionTargetMap.find(action);
     if (target == actionTargetMap.end())
     {
@@ -218,10 +222,11 @@
                          entry("ACTION=%s", convertForMessage(action).c_str()),
                          entry("TIMER_USE=%s",
                                convertForMessage(expiredTimerUse()).c_str()));
+        offset = 0;
     }
     else
     {
-        log<level::INFO>(
+        log<level::ERR>(
             "watchdog: Timed out",
             entry("ACTION=%s", convertForMessage(action).c_str()),
             entry("TIMER_USE=%s", convertForMessage(expiredTimerUse()).c_str()),
@@ -243,6 +248,47 @@
                             entry("ERROR=%s", e.what()));
             commit<InternalFailure>();
         }
+
+        if (convertForMessage(action) == "xyz.openbmc_project.State.Watchdog.Action.HardReset")
+        {
+            offset = 1;
+        }
+        else if (convertForMessage(action) == "xyz.openbmc_project.State.Watchdog.Action.PowerOff")
+        {
+            offset = 2;
+        }
+        else if (convertForMessage(action) == "xyz.openbmc_project.State.Watchdog.Action.PowerCycle")
+        {
+            offset = 3;
+        }
+    }
+
+    if (offset != 0xFF)
+    {
+        std::string property = "Offset_" + std::to_string(offset);
+        try
+        {
+            auto method = bus.new_method_call(OEMSnrService, OEMSnrPath,
+                                              PROP_INTF, "Set");
+            std::variant<bool> value = true;
+            method.append(OEMSnrIntf, property, value);
+
+            if (!bus.call(method))
+            {
+                 log<level::ERR>("Failed to set property");
+            }
+        }
+        catch (const SdBusError& e)
+        {
+           log<level::ERR>("watchdog: Failed to set property",
+                            entry("ERROR=%s", e.what()));
+        }
+    }
+
+    uint8_t ret = add_sel_event(bus, 0xF1, 0x23, offset, 0xFF, 0xFF);
+    if (0 != ret)
+    {
+        log<level::ERR>("Failed to add sel event");
     }
 
     tryFallbackOrDisable();
