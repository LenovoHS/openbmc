diff -Naur a/drivers/tty/serial/8250/8250_aspeed_vuart.c b/drivers/tty/serial/8250/8250_aspeed_vuart.c
--- a/drivers/tty/serial/8250/8250_aspeed_vuart.c	2019-08-01 18:44:02.638639100 +0800
+++ b/drivers/tty/serial/8250/8250_aspeed_vuart.c	2019-08-15 11:32:37.962960345 +0800
@@ -14,6 +14,8 @@
 #include <linux/of_address.h>
 #include <linux/of_irq.h>
 #include <linux/of_platform.h>
+#include <linux/regmap.h>
+#include <linux/mfd/syscon.h>
 #include <linux/tty.h>
 #include <linux/tty_flip.h>
 #include <linux/clk.h>
@@ -22,6 +24,7 @@
 
 #define ASPEED_VUART_GCRA		0x20
 #define ASPEED_VUART_GCRA_VUART_EN		BIT(0)
+#define ASPEED_VUART_GCRA_HOST_SIRQ_POLARITY	BIT(1)
 #define ASPEED_VUART_GCRA_DISABLE_HOST_TX_DISCARD BIT(5)
 #define ASPEED_VUART_GCRB		0x24
 #define ASPEED_VUART_GCRB_HOST_SIRQ_MASK	GENMASK(7, 4)
@@ -69,7 +72,7 @@
 
 	addr = (readb(vuart->regs + ASPEED_VUART_ADDRH) << 8) |
 		(readb(vuart->regs + ASPEED_VUART_ADDRL));
-
+	
 	return snprintf(buf, PAGE_SIZE - 1, "0x%x\n", addr);
 }
 
@@ -87,7 +90,7 @@
 
 	writeb(val >> 8, vuart->regs + ASPEED_VUART_ADDRH);
 	writeb(val >> 0, vuart->regs + ASPEED_VUART_ADDRL);
-
+	
 	return count;
 }
 
@@ -130,9 +133,52 @@
 }
 
 static DEVICE_ATTR_RW(sirq);
+static ssize_t sirq_polarity_show(struct device *dev,
+				  struct device_attribute *attr, char *buf)
+{
+	struct aspeed_vuart *vuart = dev_get_drvdata(dev);
+	u8 reg;
+
+	reg = readb(vuart->regs + ASPEED_VUART_GCRA);
+	reg &= ASPEED_VUART_GCRA_HOST_SIRQ_POLARITY;
+
+	return snprintf(buf, PAGE_SIZE - 1, "%u\n", reg ? 1 : 0);
+}
+
+static void aspeed_vuart_set_sirq_polarity(struct aspeed_vuart *vuart,
+					   bool polarity)
+{
+	u8 reg = readb(vuart->regs + ASPEED_VUART_GCRA);
+
+	if (polarity)
+		reg |= ASPEED_VUART_GCRA_HOST_SIRQ_POLARITY;
+	else
+		reg &= ~ASPEED_VUART_GCRA_HOST_SIRQ_POLARITY;
+
+	writeb(reg, vuart->regs + ASPEED_VUART_GCRA);
+}
+
+static ssize_t sirq_polarity_store(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf, size_t count)
+{
+	struct aspeed_vuart *vuart = dev_get_drvdata(dev);
+	unsigned long val;
+	int err;
+
+	err = kstrtoul(buf, 0, &val);
+	if (err)
+		return err;
+
+	aspeed_vuart_set_sirq_polarity(vuart, val != 0);
 
+	return count;
+}
+
+static DEVICE_ATTR_RW(sirq_polarity);
 static struct attribute *aspeed_vuart_attrs[] = {
 	&dev_attr_sirq.attr,
+	&dev_attr_sirq_polarity.attr,
 	&dev_attr_lpc_address.attr,
 	NULL,
 };
@@ -301,6 +347,26 @@
 
 	return 1;
 }
+static void aspeed_vuart_auto_configure_sirq_polarity(
+	struct aspeed_vuart *vuart, struct device_node *syscon_np,
+	u32 reg_offset, u32 reg_mask)
+{
+	struct regmap *regmap;
+	u32 value;
+
+	regmap = syscon_node_to_regmap(syscon_np);
+	if (IS_ERR(regmap)) {
+		dev_warn(vuart->dev,
+			 "could not get regmap for espi-enabled\n");
+		return;
+	}
+	if (regmap_read(regmap, reg_offset, &value)) {
+		dev_warn(vuart->dev, "could not read hw strap table\n");
+		return;
+	}
+
+	aspeed_vuart_set_sirq_polarity(vuart, (value & reg_mask) == 0);
+}
 
 static int aspeed_vuart_probe(struct platform_device *pdev)
 {
@@ -310,6 +376,7 @@
 	struct resource *res;
 	u32 clk, prop;
 	int rc;
+	struct of_phandle_args espi_enabled_args;
 
 	np = pdev->dev.of_node;
 
@@ -360,7 +427,7 @@
 	/* If current-speed was set, then try not to change it. */
 	if (of_property_read_u32(np, "current-speed", &prop) == 0)
 		port.port.custom_divisor = clk / (16 * prop);
-
+	
 	/* Check for shifted address mapping */
 	if (of_property_read_u32(np, "reg-offset", &prop) == 0)
 		port.port.mapbase += prop;
@@ -372,9 +439,10 @@
 	/* Check for fifo size */
 	if (of_property_read_u32(np, "fifo-size", &prop) == 0)
 		port.port.fifosize = prop;
-
+	
 	/* Check for a fixed line number */
 	rc = of_alias_get_id(np, "serial");
+	
 	if (rc >= 0)
 		port.port.line = rc;
 
@@ -386,10 +454,10 @@
 	port.port.uartclk = clk;
 	port.port.flags = UPF_SHARE_IRQ | UPF_BOOT_AUTOCONF
 		| UPF_FIXED_PORT | UPF_FIXED_TYPE | UPF_NO_THRE_TEST;
-
+		
 	if (of_property_read_bool(np, "no-loopback-test"))
 		port.port.flags |= UPF_SKIP_TEST;
-
+	
 	if (port.port.fifosize)
 		port.capabilities = UART_CAP_FIFO;
 
@@ -401,7 +469,17 @@
 		goto err_clk_disable;
 
 	vuart->line = rc;
-
+	rc = of_parse_phandle_with_fixed_args(
+		np, "espi-enabled", 2, 0, &espi_enabled_args);
+	if (rc < 0) {
+		dev_warn(&pdev->dev, "espi-enabled property not found\n");
+	} else {
+		aspeed_vuart_auto_configure_sirq_polarity(
+			vuart, espi_enabled_args.np,
+			espi_enabled_args.args[0],
+			BIT(espi_enabled_args.args[1]));
+		of_node_put(espi_enabled_args.np);
+	}
 	aspeed_vuart_set_enabled(vuart, true);
 	aspeed_vuart_set_host_tx_discard(vuart, true);
 	platform_set_drvdata(pdev, vuart);
diff -Naur a/drivers/tty/serial/8250/Kconfig b/drivers/tty/serial/8250/Kconfig
--- a/drivers/tty/serial/8250/Kconfig	2019-08-01 18:44:02.638639100 +0800
+++ b/drivers/tty/serial/8250/Kconfig	2019-08-02 10:17:49.245517262 +0800
@@ -242,6 +242,7 @@
 	tristate "Aspeed Virtual UART"
 	depends on SERIAL_8250
 	depends on OF
+	depends on REGMAP && MFD_SYSCON
 	help
 	  If you want to use the virtual UART (VUART) device on Aspeed
 	  BMC platforms, enable this option. This enables the 16550A-
