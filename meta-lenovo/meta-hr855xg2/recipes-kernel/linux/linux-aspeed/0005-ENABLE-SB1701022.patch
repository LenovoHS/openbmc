diff -Naur a/drivers/hwmon/pmbus/Kconfig b/drivers/hwmon/pmbus/Kconfig
--- a/drivers/hwmon/pmbus/Kconfig	2019-07-25 10:54:44.670027700 +0800
+++ b/drivers/hwmon/pmbus/Kconfig	2019-07-25 11:21:32.167772433 +0800
@@ -211,5 +211,13 @@
 
 	  This driver can also be built as a module. If so, the module will
 	  be called RAA228006.
+	  
+config SENSORS_SN1701022
+	tristate "SN1701022"
+	help
+	  If you say yes here you get hardware monitoring support for SN1701022.
+
+	  This driver can also be built as a module. If so, the module will
+	  be called sn1701022.
 
 endif # PMBUS
diff -Naur a/drivers/hwmon/pmbus/Makefile b/drivers/hwmon/pmbus/Makefile
--- a/drivers/hwmon/pmbus/Makefile	2019-07-25 10:54:44.670027700 +0800
+++ b/drivers/hwmon/pmbus/Makefile	2019-07-25 11:22:02.433600664 +0800
@@ -24,3 +24,4 @@
 obj-$(CONFIG_SENSORS_UCD9200)	+= ucd9200.o
 obj-$(CONFIG_SENSORS_ZL6100)	+= zl6100.o
 obj-$(CONFIG_SENSORS_RAA228006)	+= raa228006.o
+obj-$(CONFIG_SENSORS_SN1701022)	+= sn1701022.o
diff -Naur a/drivers/hwmon/pmbus/sn1701022.c b/drivers/hwmon/pmbus/sn1701022.c
--- a/drivers/hwmon/pmbus/sn1701022.c	1970-01-01 08:00:00.000000000 +0800
+++ b/drivers/hwmon/pmbus/sn1701022.c	2019-07-25 12:08:37.957828413 +0800
@@ -0,0 +1,70 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Hardware monitoring driver for sn1701022 
+ *
+ * Copyright (c) 2017 Google Inc
+ *
+ *
+ *          
+ * The device supports VOUT_PEAK, IOUT_PEAK, and TEMPERATURE_PEAK, however
+ * this driver does not currently support them.
+ */
+
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include "pmbus.h"
+
+static struct pmbus_driver_info sn1701022_info = {
+	.pages = 2,
+	.format[PSC_VOLTAGE_IN] = linear,
+	.format[PSC_VOLTAGE_OUT] = vid,
+	.vrm_version = vr13,
+	.format[PSC_CURRENT_OUT] = linear,
+	.format[PSC_CURRENT_IN] = linear,
+	.format[PSC_POWER] = linear,
+	.format[PSC_TEMPERATURE] = linear,
+	
+	.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_STATUS_INPUT
+	    | PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP
+	    | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT
+	    | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT
+	    | PMBUS_HAVE_POUT,
+		
+	.func[1] = PMBUS_HAVE_VIN | PMBUS_HAVE_STATUS_INPUT
+	    | PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP
+	    | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT
+	    | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT
+	    | PMBUS_HAVE_POUT,
+};
+
+static int sn1701022_probe(struct i2c_client *client,
+			 const struct i2c_device_id *id)
+{
+	return pmbus_do_probe(client, id, &sn1701022_info);
+}
+
+static const struct i2c_device_id sn1701022_id[] = {
+	{"sn1701022", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, sn1701022_id);
+
+/* This is the driver that will be inserted */
+static struct i2c_driver sn1701022_driver = {
+	.driver = {
+		   .name = "sn1701022",
+		   },
+	.probe = sn1701022_probe,
+	.remove = pmbus_do_remove,
+	.id_table = sn1701022_id,
+};
+
+module_i2c_driver(sn1701022_driver);
+
+MODULE_AUTHOR("Yonghui Liu <liuyh21@lenovo.com>");
+MODULE_DESCRIPTION("PMBus driver for  sn1701022");
+MODULE_LICENSE("GPL");
